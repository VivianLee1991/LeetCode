// 1. Search from the last element, find the first neighboring pair nums[I-1] < nums[I]
//    set prev = i-1, cur = i
// 2. Find from the last element for the first element which nums[k] > nums[prev]
// 3. swap(prev, k)
// 4. Reverse the order of elements in [cur, Len-1]

class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 0) return;
        
        int prev = -1;
        int cur = -1;
        for(int i = nums.length-1; i > 0; i--) {
            if(nums[i-1] < nums[i]) {
                prev = i-1;
                cur = i;
                break;
            }
        }

        if(prev == -1) {
            reverse(nums, 0, nums.length-1);
            return;
        }
        
        for(int i = nums.length-1; i >= cur; i--) {
            if(nums[i] > nums[prev]) {
                swap(nums, i, prev);
                break;
            }
        }
        
        reverse(nums, cur, nums.length-1);
    }
    
    private void reverse(int[] nums, int start, int end) {
        if(start == end) return;
        final int mid = start + (end - start) / 2;
        for(int i = start; i <= mid; i++) {
            swap(nums, i, start+end-i);
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}


/****************** Optimize reverse **********************/

    private void reverse(int[] nums, int start, int end) {
        while(start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }