/**************Time Limit Exceeded**************/

class Solution {
    public String minWindow(String s, String t) {
        if(t == null || t.isEmpty() || s == null || s.isEmpty()) {
            return "";
        }
        HashMap<Character, Integer> tMap = str2Map(t);  // Convert t to hash map.
        List<Locator> filteredS = filterS(s, tMap);     // Filter s by chars in t.
        
        // Search 1st window
        int l = 0;  // l, r are index of item in filtered s.
        int r = findWindow(l, filteredS, tMap, t.length());  // find 1st window in filtered s containing t: l = 0, find r = ?
        if(r == -1) {  // string s does not contain all chars in t
            return "";
        }
        
        int minSize = windowSize(l, r, filteredS);
        String minWin = window(l, r, filteredS, s);
        
        // Slide window to find minimum window in filteredS.
        while(l <= filteredS.size() - t.length() + 1) {
            l++;
            r = findWindow(l, filteredS, tMap, t.length());
            if(r != -1) {
                int winSize = windowSize(l, r, filteredS);
                if(winSize < minSize) {
                    minSize = winSize;
                    minWin = window(l, r, filteredS, s);
                }
            }
        }
        return minWin;
    }
    
    private int windowSize(int l, int r, List<Locator> filteredS) {
        return filteredS.get(r).index - filteredS.get(l).index + 1;
    }
    
    private String window(int l, int r, List<Locator> filteredS, String s) {
        return s.substring(filteredS.get(l).index, filteredS.get(r).index + 1);
    }
    
    private int findWindow(int l, final List<Locator> s, final HashMap<Character, Integer> tMap, final int tSize) {
        HashMap<Character, Integer> map = new HashMap<>(tMap);
        int r = l;  // start searching from l
        int num = 0;
        while(r < s.size()) {
            char c = s.get(r).ch;
            int count = map.getOrDefault(c, 0);
            if(count > 0) {
                map.put(c, count-1);
                num++;
                if(num == tSize) {
                    return r;
                }
            }
            r++;
        }
        return -1;
    }
    
    private List<Locator> filterS(final String s, final HashMap<Character, Integer> tMap) {
        List<Locator> filtered = new ArrayList<>();
        
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (tMap.containsKey(c)) {
                filtered.add(new Locator(i, c));
            }
        }
        return filtered;
    }
    
    private HashMap<Character, Integer> str2Map(final String t) {
        HashMap<Character, Integer> map = new HashMap<>();
        if(t == null || t.isEmpty()) return map;
        for(int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        return map;
    }
    
    private class Locator {
        int  index;  // index of the character in string "s"
        char ch;     // character
        
        // Constructor.
        public Locator(final int index, final char ch) {
            this.index = index;
            this.ch = ch;
        }
    }
}
