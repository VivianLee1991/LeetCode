/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // use preorder traversal!!!  
    
    private static final String SPACE = " ";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder ans = new StringBuilder();
        preorder(ans, root);
        System.out.println(ans.toString());
        return ans.toString();    
    }
    
    // root - left - right
    private void preorder(StringBuilder builder, TreeNode root) {
        if(root == null) {
            builder.append("#" + SPACE);
        } else {
            builder.append(root.val + SPACE);
            preorder(builder, root.left);
            preorder(builder, root.right);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Scanner scanner = new Scanner(data);
        TreeNode root = preorder(scanner);
        scanner.close();
        return root;
    }
    
    private TreeNode preorder(Scanner scanner) {
        if(!scanner.hasNext()) {
            return null;
        }
        String next = scanner.next();
        if("#".equals(next)) {
            return null;
        } else {
            TreeNode cur = new TreeNode(Integer.valueOf(next));
            cur.left = preorder(scanner);
            cur.right = preorder(scanner);
            return cur;
        }
    }
    
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));