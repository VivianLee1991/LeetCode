/***************************** Hash Set *********************************/

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        // if(nums1.length == 0 || nums2.length == 0) {
        //     return new int[0];
        // }
        
        Set<Integer> set1 = convert2Set(nums1);
        Set<Integer> set2 = convert2Set(nums2);
        // Set<Integer> set1 = new HashSet<Integer>(IntStream.of(nums1).boxed().collect(Collectors.toList()));
        // Set<Integer> set2 = new HashSet<Integer>(IntStream.of(nums2).boxed().collect(Collectors.toList()));
        
        List<Integer> intersect = new LinkedList<>();
        
        for(Integer i : set1) {
            if(set2.contains(i)) {
                intersect.add(i);
            }
        }
        return toArray(intersect);
        //return intersect.stream().mapToInt(Integer::intValue).toArray();
    }
    
    private Set<Integer> convert2Set(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int i : nums) {
            set.add(i);
        }
        return set;
    }
    
    private int[] toArray(List<Integer> list) {
        int n = list.size();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = list.get(i);
        }
        return arr;
    }
}


/***************************** Sort and Two Pointers *********************************/

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {     
        List<Integer> intersect = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int p = 0;
        int q = 0;
        while(p < nums1.length && q < nums2.length) {
            while(p+1 < nums1.length && nums1[p+1] == nums1[p]) {  // bypass duplicates
                p++;
            }
            while(q+1 < nums2.length && nums2[q+1] == nums2[q]) {  // bypass duplicates
                q++;
            }
            if(nums1[p] == nums2[q]) {
                intersect.add(nums1[p]);
                p++;
                q++;
            } else if (nums1[p] < nums2[q]) {
                p++;
            } else {
                q++;
            }
        }
        
        return toArray(intersect);
    }

    private int[] toArray(List<Integer> list) {
        int n = list.size();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = list.get(i);
        }
        return arr;
    }
}


class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {     
        List<Integer> intersect = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int p = 0;
        int q = 0;
        while(p < nums1.length && q < nums2.length) {
            if(nums1[p] < nums2[q]) {
                p++;
            } else if(nums1[p] > nums2[q]) {
                q++;
            } else {
                if(intersect.size()==0 || nums1[p] != intersect.get(intersect.size()-1)) {
                    intersect.add(nums1[p]);
                }
                p++;
                q++;
            }
        }
        
        return toArray(intersect);
    }

    private int[] toArray(List<Integer> list) {
        int n = list.size();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = list.get(i);
        }
        return arr;
    }
}


/******************* Arrays.copyOfRange() *************************/
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        // method1: convert array to hashmap, O(N)
        // choose the map for the larger array, check whether the other map contains the same keys
        
        // method2: optimized method1 (space better)
        // only convert the larger array to hash map, check each element of the other array. If the map contains the key or the value is > 0, deduct the value by 1.
        
        // method3: sort each array first, then use pointers to check each element
        // O(NlogN), space saving
        
        // intersections must be smaller than nums1 and nums2
        // p, q >= r

        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int p = 0;
        int q = 0;
        int r = 0;
        while(p < nums1.length && q < nums2.length) {
            if(nums1[p] == nums2[q]) {
                nums1[r] = nums1[p];
                p++;
                q++;
                r++;
            } else if (nums1[p] < nums2[q]) {
                p++;
            } else {
                q++;
            }
        }
        
        return Arrays.copyOfRange(nums1, 0, r);
    }
}
