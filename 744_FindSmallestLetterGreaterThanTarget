/***************************** Binary search *********************************/

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {

        final int n = letters.length;
        int l = 0;
        int r = n - 1;
        
        while (l < r) {
            int mid = l + (r - l) / 2;
            if(letters[mid] < target) {
                l = mid + 1;
            } else if (letters[mid] > target) {
                r = mid;
            } else {
                while(mid < n && letters[mid] == target) {  // Attention: could have duplicates!
                    mid++;
                }
                return letters[mid % n];
            }
        }
        
        if (letters[l] <= target) {
            return letters[(l + 1) % n];
        } else {
            return letters[l];
        }
    }
}


/***************************** Binary search (Simplified) *********************************/

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        final int n = letters.length;
        int l = 0;
        int r = n - 1;
        
        while (l < r) {
            int mid = l + (r - l) / 2;
            if(letters[mid] <= target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return letters[l] <= target ? letters[0] : letters[l];
    }
}