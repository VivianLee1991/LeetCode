/************** BFS for each gate **************/

class Solution {
    public void wallsAndGates(int[][] rooms) {
        // BFS for every gate.
        if(rooms.length == 0 || rooms[0].length == 0) return;
        final int m = rooms.length;
        final int n = rooms[0].length;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(rooms[i][j] == 0) {
                    bfs(rooms, m, n, i, j);
                }
            }
        }
    }
    
    private void bfs(int[][] rooms, final int m, final int n, int i, int j) {
        Queue<int[]> toVisit = new LinkedList<int[]>();
        toVisit.add(new int[]{i, j});
        
        while(!toVisit.isEmpty()) {
            int[] cur = toVisit.poll();
            int x = cur[0];
            int y = cur[1];
            int d = rooms[x][y];
            
            if(y-1 >= 0 && rooms[x][y-1] > d+1) {
                rooms[x][y-1] = d+1;
                toVisit.add(new int[]{x, y-1});
            }
            
            if(y+1 < n && rooms[x][y+1] > d+1) {
                rooms[x][y+1] = d+1;
                toVisit.add(new int[]{x, y+1});
            }
            
            if(x-1 >=0 && rooms[x-1][y] > d+1) {
                rooms[x-1][y] = d+1;
                toVisit.add(new int[]{x-1, y});
            }
            
            if(x+1 < m && rooms[x+1][y] > d+1) {
                rooms[x+1][y] = d+1;
                toVisit.add(new int[]{x+1, y});
            }
        }
    }
}

/************** Optimized BFS (adding all gates first) **************/

class Solution {
    public void wallsAndGates(int[][] rooms) {
        // BFS for every gate.
        if(rooms.length == 0 || rooms[0].length == 0) return;
        final int m = rooms.length;
        final int n = rooms[0].length;
        
        Queue<int[]> toVisit = new LinkedList<int[]>();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(rooms[i][j] == 0) {
                    toVisit.add(new int[]{i, j});
                }
            }
        }
        
        while(!toVisit.isEmpty()) {
            int[] cur = toVisit.poll();
            int x = cur[0];
            int y = cur[1];
            int d = rooms[x][y];
            
            if(y-1 >= 0 && rooms[x][y-1] > d+1) {
                rooms[x][y-1] = d+1;
                toVisit.add(new int[]{x, y-1});
            }
            
            if(y+1 < n && rooms[x][y+1] > d+1) {
                rooms[x][y+1] = d+1;
                toVisit.add(new int[]{x, y+1});
            }
            
            if(x-1 >=0 && rooms[x-1][y] > d+1) {
                rooms[x-1][y] = d+1;
                toVisit.add(new int[]{x-1, y});
            }
            
            if(x+1 < m && rooms[x+1][y] > d+1) {
                rooms[x+1][y] = d+1;
                toVisit.add(new int[]{x+1, y});
            }
        }
    }
}
