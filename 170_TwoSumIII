
/***************************** Best Solution *********************************/

class TwoSum {
    // number, count
    private Map<Integer, Integer> map;
    private int min;
    private int max;

    /** Initialize your data structure here. */
    public TwoSum() {
        map = new HashMap<Integer, Integer>();
        min = Integer.MAX_VALUE;
        max = Integer.MIN_VALUE;
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        if(map.containsKey(number)) {
            map.put(number, 2);
        } else {
            map.put(number, 1);
        }
        if(number > max) {
            max = number;
        }
        if(number < min) {
            min = number;
        }
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        if(value > 2*max || value < 2*min) {
            return false;
        }
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int num = entry.getKey();
            if(map.containsKey(value - num)) {
                if(!(value-num == num && map.get(num) == 1)) {
                    return true;
                }
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */