/****************** Recursive **********************/

class Solution {
    
    // recursion
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        if(l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}


/****************** Iterative **********************/

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = null;
        ListNode tail = null;
        
        while(l1 != null && l2 != null) {
            ListNode next = null;
            if(l1.val < l2.val) {
                next = l1;
                l1 = l1.next;
            } else {
                next = l2;
                l2 = l2.next;
            }
            
            if(head == null) {
                head = next;
                tail = next;
            } else {
                tail.next = next;
                tail = next;
            }
        }
        
        ListNode last = l1 != null ? l1 : l2;
        if(head == null) {  // edge case: l1: 1, l2: null
            head = last;
        } else {
            tail.next = last;
        }

        return head;
    }
}