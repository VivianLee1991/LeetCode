public class NestedIterator implements Iterator<Integer> {
    
    private Stack<NestedInteger> stack;

    public NestedIterator(List<NestedInteger> nestedList) {
        stack = new Stack<>();
        pushListToStack(stack, nestedList);
    }
    
    private void pushListToStack(Stack<NestedInteger> stack, List<NestedInteger> nestedList) {
        if(nestedList == null || nestedList.size() == 0) return;
        
        for(int i = nestedList.size()-1; i >= 0; i--) {
            NestedInteger ni = nestedList.get(i);
            if(ni != null) {
                stack.push(ni);
            }  
        }
    }

    @Override
    public Integer next() {
        return stack.pop().getInteger();
    }

    // flatten when checking hasNext(), considering the case like [[]]
    @Override
    public boolean hasNext() {
        if(stack.isEmpty()) return false;  // check stack first!!!
        
        NestedInteger top = stack.peek();
        if(top.isInteger()) {
            return true;
        }
        stack.pop();
        pushListToStack(stack, top.getList());
        return hasNext();   
    }
}