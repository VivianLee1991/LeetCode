
class PeekingIterator implements Iterator<Integer> {
    
    private Iterator<Integer> iterator;
    private Integer next;  // buffer and indicator

	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
        this.iterator = iterator;
        next = null;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
        if(next == null) {
            next = iterator.next();
        }
         return next;  // consider when we call peek() repeatedly
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    if(next != null) {
            Integer ans = next;
            next = null;
            return ans;
        } else {
            return iterator.next();
        }
	}

	@Override
	public boolean hasNext() {
	    return iterator.hasNext() || next != null;
	}
}