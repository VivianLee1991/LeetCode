/************************  O(n^2) ****************************/
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        final int n = gas.length;
        
        int[] delta = new int[n];
        for(int i = 0; i < n; i++) {
            delta[i] = gas[i] - cost[i];
        }
        
        for(int start = 0; start < n; start++) {
            if(checkFromStart(delta, start)) {
                return start;
            }
        }
        
        return -1;
    }
    
    private boolean checkFromStart(int[] delta, int start) {
        final int n = delta.length;
        int tank = 0;
        for(int i = start; i < start + n; i++) {
            tank += delta[i%n];
            if(tank < 0) return false;
        }
        return true;
    }
}

/************************ Greedy O(n) ****************************/

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        final int n = gas.length;
        int start = 0;
        int tank = 0;
        int total = 0;
        
        for(int i = 0; i < n; i++) {  // O(n)
            int cur = gas[i] - cost[i];
            tank += cur;
            total += cur;
            if(tank < 0) {
                start = i+1;
                tank = 0;
            }
        }
        return total < 0 ? -1 : start;
    }
}